Code autogeneration (for developers)
====================================

This library uses code autogeneration to specialize kernel code for the different contexts.
Three context are presently available: ``cpu``, ``cuda``,  and ``opencl``.


Configuring and running the code generator
------------------------------------------

The code generator is configured by editing the initial part of the `xfields/src/000_specialize_code.py <autogfile>`_ file:

.. code-block:: python

    todo = [
        {'src_file': './linear_interpolators.h',
         'out_file': '../src_autogenerated/linear_interpolators_cpu.c',
         'context': 'cpu',
        },
        {'src_file': './linear_interpolators.h',
         'out_file': '../src_autogenerated/linear_interpolators_opencl.clh',
         'context': 'opencl',
        },
        {'src_file': './linear_interpolators.h',
         'out_file': '../src_autogenerated/linear_interpolators_cuda.cu',
         'context': 'cuda',
        },
    ]

.. _autogfile: https://github.com/xsuite/xfields/blob/master/xfields/src/000_specialize_code.py

and by executing it:

.. code-block:: bash

    $ cd fields/src/
    $ python 000_specialize_code.py

An example annotated source file can be found `here <https://github.com/xsuite/xfields/blob/master/xfields/src/linear_interpolators.h>`_ and the corresponding autogenerated source files for the three contexts can be found in `this folder <https://github.com/xsuite/xfields/tree/master/xfields/src_autogenerated>`_ .

Writing the source code
-----------------------

The developer writes a single C source code, providing additional information through the following comment strings, as described in the following.

``vectorize_over`` block
~~~~~~~~~~~~~~~~~~~~~~~~

The syntax is the following:

.. code-block:: C

    int myvar = 0; //vectorize_over myvar myvarlim

        [MY CODE]

        //end_vectorize

This is translated into a for loop in the CPU implementation and in a kernel function for the parallel implementations (cupy, pyopencl).

The generated cpu code will be:

.. code-block:: C

    int myvar; //autovectorized
    for (myvar=0; myvar<myvarlim; myvar++){ //autovectorized

        [MY CODE]

        }//end autovectorized

The generated CUDA code will be:

.. code-block:: C

    int myvar; //autovectorized
    myvar = blockDim.x * blockIdx.x + threadIdx.x;//autovectorized

        [MY CODE]

    //end autovectorized

The corresponding generated OpenCL code will be:

.. code-block:: C

    int myvar; //autovectorized
    myvar = get_global_id(0); //autovectorized

        [MY CODE]

    //end autovectorized


``only_for_context`` directive
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The ``\\only_for_context`` directive can be used to include a givem line only for a certain context.
For example with the following code the line marked line is included only in the GPU implementation.

.. code-block:: C

    #include <atomicadd.h> //only_for_context cpu

``gpukern`` directive
~~~~~~~~~~~~~~~~~~~~~

The ``\*gpukern*\`` directive is used to qualify kernel functions. The code generator replaces it with ``__global__`` in the CUDA code and with ``__kernel`` in the OpenCL code.


``gpuglmem`` directive
~~~~~~~~~~~~~~~~~~~~~~~

The ``\*gpuglmem*\`` directive is used to qualify pointers to locations in the device global memoru. The code generator replaces it with ``__global`` in the OpenCL code.










